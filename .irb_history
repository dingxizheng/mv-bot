      end
def seconds_to_hour_minute_second(seconds)
      start_hour = seconds / 3600
      start_minute = (seconds - start_hour * 3600) / 60
      start_second = seconds - start_hour * 3600 - start_minute * 60
      [start_hour, start_minute, start_second]
    end
seconds_to_hour_minute_second(100)
seconds_to_hour_minute_second(3600)
lyrics.map.with_index do |line, index|
        start_time = line["time"]
        text = line["lineLyric"]
        start_seconds, start_milliseconds = start_time.split(".").map(&:to_i)
        start_hour, start_minute, start_second = seconds_to_hour_minute_second(start_seconds)
        end_time = lyrics[index + 1]&.[]("time") || "10000.00"
        end_seconds, end_milliseconds  = end_time.split(".").map(&:to_i)
        end_hour, end_minute, end_second = seconds_to_hour_minute_second(end_seconds)
        "Dialogue: 0,#{start_hour}:#{"%02d" % start_minute}:#{"%02d" % start_second}.#{start_milliseconds},#{end_hour}:#{"%02d" % end_minute}:#{"%02d" % end_second}.#{end_milliseconds},*Default,NTP,0000,0000,0000,,#{text}"
      end
puts _
exit
lyrics = KuwoMusic.song_lyric("520590")
KuwoMusic.write_ass_file(lyrics, path: "../downloads/test.ass")
"%2d" % 630005
"%2d" % 630005
"%02d" % 630005
630005.to_s[0..2]
630005.to_s[0..]
630005.to_s[0..1]
6.to_s[0..1]
"01".to_i
exit
lyrics = KuwoMusic.song_lyric("520590")
KuwoMusic.write_ass_file(lyrics, path: "../downloads/test.ass")
exit
KuwoMusic.download_song_by_id("520590")
KuwoMusic.download_song_by_id("520590", path: "../downloads/235498")
exit
KuwoMusic.download_song_by_id("520590", path: "../downloads/235498")
ni.size
nil.size
nil / 1024
ProgressBar
progress_bar = ProgressBar.new(10)
progress_bar.increment!(1)
progress_bar.increment!(0)
progress_bar.increment!(1)
progress_bar.increment!(nil)
nil + 2
2 + nil
2 / nil
exit
KuwoMusic.download_song_by_id("520590", path: "../downloads/235498")
KuwoMusic.download_lyrics("520590", path: "../downloads/235498")
VideoMaker.make_cover_image(input: "../downloads/235498/520590_cover.jpg", output: "../downloads/235498/520590_video_cover.jpg", artist: "周杰伦", title: "半岛铁盒")
exit
VideoMaker.make_cover_image(input: "../downloads/235498/520590_cover.jpg", output: "../downloads/235498/520590_video_cover.jpg", artist: "周杰伦", title: "半岛铁盒")
exit
VideoMaker.make_video_with_subtitles(audio: "../downloads/235498/520590.mp3", output: "../downloads/235498/520590_video.mp4", ass: "../downloads/235498/520590_ass.ass", cover: "../downloads/235498/520590_video_cover.jpg")
VideoMaker.make_video_with_subtitles(audio: "../downloads/235498/520590.mp3", output: "../downloads/235498/520590_video.mp4", ass: "../downloads/235498/520590_ass.ass", cover: "../downloads/235498/520590_video_cover.jpg")
exit
VideoMaker.make_video_with_subtitles(audio: "../downloads/235498/520590.mp3", output: "../downloads/235498/520590_video.mp4", ass: "../downloads/235498/520590_ass.ass", cover: "../downloads/235498/520590_video_cover.jpg")
VideoMaker.make_video_with_subtitles(audio: "../downloads/235498/520590.mp3", output: "../downloads/235498/520590_video2.mp4", ass: "../downloads/235498/520590_ass.ass", cover: "../downloads/235498/520590_video_cover.jpg")
exit
VideoMaker.make_video_with_subtitles(audio: "../downloads/235498/520590.mp3", output: "../downloads/235498/520590_video3.mp4", ass: "../downloads/235498/520590_ass.ass", cover: "../downloads/235498/520590_video_cover.jpg")
exit
KuwoMusic.music_info("520590")
info = _
info["name"]
KuwoMusic.search_music_by_keyword("我不配")
exit
make_video("541514")
exit
make_video("541514")
KuwoMusic.search_music_by_keyword("1942")
KuwoMusic.search_music_by_keyword("1948 周杰伦")
KuwoMusic.search_music_by_keyword("1948")
KuwoMusic.search_music_by_keyword("左手指月")
make_video("60163301")
music_id = "60163301"
input = "../downloads/#{music_id}_cover.jpg"
output = "../downloads/#{music_id}_video_cover.jpg"
artist = "黄霄云"
title = "左手指月(Live)"
tmp_image_name = "#{File.basename(input, File.extname(input))}_1280x720#{File.extname(input)}"
      MiniMagick::Tool::Convert.new do |convert|
        convert << input << "-channel" << "RGBA" << "-blur" << "0x8"
        convert << "-resize" << "#{VIDEO_RESOLUTION}x"
        convert << "-gravity" << "center" << "-crop" << "16:9" << "+repage"
        convert.stack do |stack|
          stack << input
          stack << "-resize" << "320x"
        end
        convert << "-geometry" << "+260-0" << "-composite"
        convert << tmp_image_name
      end
      MiniMagick::Tool::Convert.new do |convert|
        convert << tmp_image_name
        convert.stack do |stack|
          stack << "-size" << "700x"
          stack << "-background" << "none"
          stack << "-gravity" << "west"
          stack << "-fill" << "white"
          stack << "-font" << "ShangShouDunHeiTi-2.ttf"
          stack << "-pointsize" << "80"
          stack << "caption:#{artist}\n\n#{title}"
          stack.stack do |stack2|
            stack2 << "+clone"
            stack2 << "-background" << "black"
            stack2 << "-shadow" << "80x3+4+4"
          end
          stack << "+swap" << "-background" << "none" << "-layers" << "merge" << "+repage"
          stack << "-geometry" << "+200+0"
        end
        convert << "-composite"
        convert << output
      end
      File.delete(tmp_image_name)
VIDEO_RESOLUTION = 1280
  WAVE_HEIGHT = 150
  WAVE_SIZE = "#{VIDEO_RESOLUTION}x#{WAVE_HEIGHT}"
tmp_image_name = "#{File.basename(input, File.extname(input))}_1280x720#{File.extname(input)}"
      MiniMagick::Tool::Convert.new do |convert|
        convert << input << "-channel" << "RGBA" << "-blur" << "0x8"
        convert << "-resize" << "#{VIDEO_RESOLUTION}x"
        convert << "-gravity" << "center" << "-crop" << "16:9" << "+repage"
        convert.stack do |stack|
          stack << input
          stack << "-resize" << "320x"
        end
        convert << "-geometry" << "+260-0" << "-composite"
        convert << tmp_image_name
      end
MiniMagick::Tool::Convert.new do |convert|
        convert << tmp_image_name
        convert.stack do |stack|
          stack << "-size" << "700x"
          stack << "-background" << "none"
          stack << "-gravity" << "west"
          stack << "-fill" << "white"
          stack << "-font" << "ShangShouDunHeiTi-2.ttf"
          stack << "-pointsize" << "80"
          stack << "caption:#{artist}\n\n#{title}"
          stack.stack do |stack2|
            stack2 << "+clone"
            stack2 << "-background" << "black"
            stack2 << "-shadow" << "80x3+4+4"
          end
          stack << "+swap" << "-background" << "none" << "-layers" << "merge" << "+repage"
          stack << "-geometry" << "+200+0"
        end
        convert << "-composite"
        convert << output
      end
      File.delete(tmp_image_name)
tmp_image_name = "#{File.basename(input, File.extname(input))}_1280x720#{File.extname(input)}"
      MiniMagick::Tool::Convert.new do |convert|
        convert << input << "-channel" << "RGBA" << "-blur" << "0x8"
        convert << "-resize" << "#{VIDEO_RESOLUTION}x"
        convert << "-gravity" << "center" << "-crop" << "16:9" << "+repage"
        convert.stack do |stack|
          stack << input
          stack << "-resize" << "280x"
        end
        convert << "-geometry" << "+260-0" << "-composite"
        convert << tmp_image_name
      end
      MiniMagick::Tool::Convert.new do |convert|
        convert << tmp_image_name
        convert.stack do |stack|
          stack << "-size" << "700x"
          stack << "-background" << "none"
          stack << "-gravity" << "west"
          stack << "-fill" << "white"
          stack << "-font" << "ShangShouDunHeiTi-2.ttf"
          stack << "-pointsize" << "100"
          stack << "caption:#{artist}\n#{title}"
          stack.stack do |stack2|
            stack2 << "+clone"
            stack2 << "-background" << "black"
            stack2 << "-shadow" << "80x3+4+4"
          end
          stack << "+swap" << "-background" << "none" << "-layers" << "merge" << "+repage"
          stack << "-geometry" << "+200+0"
        end
        convert << "-composite"
        convert << output
      end
      File.delete(tmp_image_name)
exit
KuwoMusic.search_music_by_keyword("上海一九四三")
make_video("=>666053")
make_video("666053")
music_id = "666053"
VideoMaker.make_video_with_subtitles(
    audio: "../downloads/#{music_id}.mp3",
    output: "../downloads/#{music_id}_music_video2.mp4",
    ass: "../downloads/#{music_id}_ass.ass",
    cover: "../downloads/#{music_id}_video_cover.jpg"
  )
exit
KuwoMusic.search_music_by_keyword("老街")
make_video("853270")
Youtube.upload_video(title: "老街 - 李荣浩", description: "老街 - 李荣浩", video: "video/files/853270_music_video.mp4", kids: false, publish_type: "PUBLIC")
Youtube.upload_video(title: "老街 - 李荣浩", description: "老街 - 李荣浩", video: "video/files/853270_music_video.mp4", kids: false, publish_type: "PUBLIC", tags: "老街,李荣浩")
Youtube.upload_video(title: "老街 - 李荣浩", description: "老街 - 李荣浩", video: "/video/files/853270_music_video.mp4", kids: false, publish_type: "PUBLIC", tags: "老街,李荣浩")
image = MiniMagick::Image.open("../downloads/853270_cover.jpg")
image.methods
image.width
image.height
500 / 16 * 9
501 / 16 * 9
509 / 16 * 9
1280 / 16 * 9
system
system("nothing good")
rs = system("nothing good")
rs
rs = system("echo 'ding'")
rs
rs
rs = system("echo $re")
rs
rs
rs = system("ruby -ty")
rs
clear
exit
exit
KuwoMusic.search_music_by_keyword("华晨宇")
KuwoMusic.artist_songs("125910")
KuwoMusic.music_lists
KuwoMusic.search_music_by_keyword("林俊杰")
list = _
list["list"]
list["list"][0]
a = list["list"][0]
c = KuwoSong.new(a)
require_relative "models/kuwo_song.rb"
require_relative "./models/kuwo_song.rb"
require_relative "app/models/kuwo_song.rb"
c = KuwoSong.new(a)
KuwoSong.attribute_names
a
a["rid"]
a["name"]
a["artist"]
a["releaseDate"]
{a:1}.each do |k, v| puts "k: #{k}" end
{a:1}.each do |k, v| puts "k: #{v}" end
"releaseDate".to_understore
"releaseDate".underscore
"musicid".underscore
exit
a = {"musicrid"=>"MUSIC_150210791", "barrage"=>"0", "artist"=>"林俊杰", "mvpayinfo"=>{"play"=>0, "vid"=>0, "down"=>0}, "pic"=>"http://img3.kuwo.cn/star/albumcover/500/95/92/3177714924.jpg", "isstar"=>0, "rid"=>150210791, "duration"=>276, "score100"=>"75", "content_type"=>"0", "track"=>1, "hasLossless"=>true, "hasmv"=>1, "releaseDate"=>"2020-09-16", "album"=>"交换余生", "albumid"=>15654238, "pay"=>"255", "artistid"=>1062, "albumpic"=>"http://img3.kuwo.cn/star/albumcover/500/95/92/3177714924.jpg", "originalsongtype"=>1, "songTimeMinutes"=>"04:36", "isListenFee"=>true, "pic120"=>"http://img3.kuwo.cn/star/albumcover/120/95/92/3177714924.jpg", "name"=>"交换余生", "online"=>1, "payInfo"=>{"play"=>"1111", "download"=>"1111", "cannotDownload"=>0, "cannotOnlinePlay"=>0, "feeType"=>{"album"=>"1"}, "down"=>"1111"}}
song = KuwoSong.create_from_info(a)
require_relative "app/models/kuwo_song.rb"
song = KuwoSong.create_from_info(a)
song
song.save!
song
Crawler
clear
KuwoMusic.search_by_keyword
KuwoMusic.search_music_by_keyword
KuwoMusic.search_music_by_keyword("2020中国好声音")
KuwoSong.first
MusicJob
exit
KuwoSong.first
job = MusicJob.where(running: false, mp3_downloaded: false).asc(:created_at).find_and_modify({ "$set": { "running": true }}, new: true)
job = MusicJob.where(running: false, mp3_downloaded: false).asc(:created_at).find_and_update({ "$set": { "running": true }}, new: true)
job = MusicJob.where(running: false, mp3_downloaded: false).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: true)
job
job
MusicJob.where(running: false, mp3_downloaded: false).count
exit
exit
KuwoSong.first
KuwoSong.first.create_job
job = MusicJob.where(running: false, mp3_downloaded: false).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: true)
job
job.running
job.reload
job.update(running: false)
job.song
job.song.albumpic
job.song.albumpic.gsub(/albumcover\/\d+/, "albumcover/1000")
job
job.id
 LOG.info "Start process music job: #{job.id}, song_id: #{job.song_id}, name: #{job.song.name}"
LOG
LOG.tagged
LOG.taged
LOG.tagged
Time.now
KuwoDownloader
exit
exit
KuwoDownloader
Thread.new { KuwoDownloader.start_job }
a = MusicJob.last
a
a.sond_od
a.song_id
exit
exit
a = MusicJob.first
a.running
a
Time.now
a.update(error: nil, running: false)
a.reload
Thread.new { KuwoDownloader.start_job }
a.update(error: nil, running: false)
exit
a = MusicJob.first
a
a.sond_id
a.song_id
a.song.rib
a.song.rid
exit
a = MusicJob.first
a
a.update(error: nil, running: false)
a.running
Thread.new { KuwoDownloader.start_job }
exit
a = MusicJob.first
a
a.update!(running: false, error: nil)
MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at).first
exit
Thread.new { KuwoDownloader.start_job }
exit
MusicJob.last
MusicJob.last.update(running: false)
exit
Thread.new { KuwoDownloader.start_job }
job
MusicJob.last
exit
Song.first
exit
MiguMusic.search_music_by_keyword("周杰伦")
exit
MiguMusic.song_info("3790007")
MiguMusic.song_info("3790")
MiguMusic.song_info("3790007").dig("resource")
exit
MiguMusic.song_lyrics("60054701923")
exit
MiguMusic.song_url("60054701923", content_id: "600902000006889366", "resourceType": "2")
MiguMusic.song_url("60054701923", content_id: "600902000006889366", "resource_type": "2")
exit
MiguMusic.song_url("60054701923", content_id: "600902000006889366", "resource_type": "2")
exit
MiguMusic.song_url("60054701923", content_id: "600902000006889366", "resource_type": "2")
exit
MiguMusic.song_url("60054701923", content_id: "600902000006889366", "resource_type": "2")
exit
MiguMusic.song_url("60054701923", content_id: "600902000006889366", "resource_type": "2")
exit
song = MiguMusic.song_info("3790007")
song
MiguMusic.song_url("600547", content_id: "600902000006889366", "resource_type": "2")
exit
MiguMusic.song_url( content_id: "600902000006889366", "resource_type": "2")
MiguMusic.song_url( content_id: "600902000006889366", "resource_type": 2)
MiguMusic.song_url( content_id: "600902000006889366", "resource_type": nil)
exit
MiguMusic.song_url( content_id: "600902000006889366", "resource_type": nil)
MiguMusic.song_url( content_id: "6009020000068893664", "resource_type": 2)
MiguMusic.song_url( content_id: "600902000006889366", "resource_type": 2)
exit
MiguMusic.song_url( content_id: "600902000006889366", "resource_type": 2)
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 320)
url
MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
MiguMusic.download_file(url, output: "../downloads/test.mp3")
rs = _
rs.body
rs.raw_response
rs.response
rs.response.body
rs.response.raw
url
MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
url
MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
url
MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
url
MiguMusic.download_file(url, output: "../downloads/test.mp3")
r.response
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
r.history
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
url
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
exit
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 128)
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
r = MiguMusic.download_file(url, output: "../downloads/test.mp3")
url = MiguMusic.song_url( content_id: "600902000006889366", "bit_rate": 320)
r = MiguMusic.download_file(url, output: "../downloads/test_320.mp3")
exit
MiguMusic.song_pic_url("600902000006889366")
exit
MiguMusic.song_pic_url("600902000006889366")
exit
MiguMusic.song_pic_url("600902000006889366")
MiguMusic.song_pic_url("3790007")
exit
MiguMusic.song_pic_url("3790007")
exit
MiguMusic.song_pic_url("3790007")
MiguMusic.song_lyrics("60054701923")
exit
MiguMusic.song_lyrics("60054701923")
content = _
content.split("\r\n")
"04:19.49".match(/(?<minute>\d{2}):(?<second>\d{2}).(?<micro_second>\d{2})/)
rs = _
rs
rs.captures
rs[:minute]
rs[:minute].to_i
exit
MiguMusic.song_lyrics("60054701923")
exit
MiguMusic.song_lyrics("60054701923")
exit
MiguMusic.song_lyrics("60054701923")
LYRIC_LINE_PATTERN = /\[(?<minute>\d{2}):(?<second>\d{2}).(?<micro_second>\d{2})\](<?lyric>.*)/
"[04:24.49]你好像还是说了拜".match(LYRIC_LINE_PATTERN)
"[04:24.49]你好像还是说了拜".match(/\[(?<minute>\d{2}):(?<second>\d{2}).(?<micro_second>\d{2})\]/)
"[04:24.49]你好像还是说了拜".match(/\[(?<minute>\d{2}):(?<second>\d{2}).(?<micro_second>\d{2})\].*/)
"[04:24.49]你好像还是说了拜".match(/\[(?<minute>\d{2}):(?<second>\d{2}).(?<micro_second>\d{2})\](.*)/)
"[04:24.49]你好像还是说了拜".match(/\[(?<minute>\d{2}):(?<second>\d{2})\.(?<micro_second>\d{2})\](.*)/)
"[04:24.49]你好像还是说了拜".match(/\[(?<minute>\d{2}):(?<second>\d{2})\.(?<micro_second>\d{2})\](?<dd>.*)/)
exit
MiguMusic.song_lyrics("60054701923")
MiguMusic.song_lyrics("60054701923")
exit
exit
MiguMusic.song_lyrics("60054701923")
exit
list = MiguMusic.song_lyrics("60054701923")
MiguMusic.lyrics_to_ass_file(list, path: "../downloads/gooo.ass")
list
MiguMusic.seconds_to_hour_minute_second(264490)
264490 / 1000
264490 / 1000 / 3600
exit
list = MiguMusic.song_lyrics("60054701923")
MiguMusic.lyrics_to_ass_file(list, path: "../downloads/gooo.ass")
264490 / 60 / 1000
milliseconds = 264490
start_hour = milliseconds / 3600 / 1000
start_hour
start_minute = (milliseconds - start_hour * 3600 * 1000) / 60 / 1000
start_minute
milliseconds - start_hour * 3600 * 1000 - start_minute * 60 * 1000
exit
list = MiguMusic.song_lyrics("60054701923")
MiguMusic.lyrics_to_ass_file(list, path: "../downloads/gooo.ass")
exit
list = MiguMusic.song_lyrics("60054701923")
MiguMusic.lyrics_to_ass_file(list, path: "../downloads/gooo.ass")
exit
list = MiguMusic.song_lyrics("60054701923")
MiguMusic.lyrics_to_ass_file(list, path: "../downloads/gooo.ass")
exit
MiguMusic.search_music("周杰伦")
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("周杰伦")
rs = _
rs.body
exit
MiguMusic.search_music("周杰伦")
MiguMusic.search_music("李宇春")
MiguMusic.search_music("李宇春").body
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
exit
MiguMusic.search_music("李宇春")
MiguMusic.artist_songs("320")
eixt
exit
MiguMusic.artist_songs("320")[0]
exit
MiguMusic.artist_songs("320")[0]
MiguMusic.artist_songs("320")
exit
MiguMusic.artist_songs("320")[0]
MiguMusic.search_music("周杰伦")
Song.first
MusicJob.first
MusicJob.delete
MusicJob.first.delete
MiguMusic.search_music("周杰伦")
exit
MiguMusic.search_music("周杰伦")
songs = _["musics"]
songs
songs.size
songs[0]
migu_music = _
model_keys_mapping.keys.map do |key|
        [key, migu_music[model_keys_mapping[key]&.to_s || "_____"]]
model_keys_mapping = { 
        musicid: :id, 
        artistid: :singerId, 
        name: :songName,
        albumid: :albumId, 
        artist: :singerName,
        album: :albumName,
        copyrightid: :copyrightId
      }
model_keys_mapping.keys.map do |key|
        [key, migu_music[model_keys_mapping[key]&.to_s || "_____"]]
      end
exit
data = MiguMusic.search_music("周杰伦")
migu_music = data["musics"][0]
migu_music
MiguMusic.migu_to_song_model(migu_music)
SongJob.count
MusicJob.count
exit
data = MiguMusic.search_music("周杰伦")
migu_music = data["musics"][0]
MiguMusic.migu_to_song_model(migu_music)
Song.count
Song.first
song = Song.first
MiguMusic.song_info(song.musicid)
MiguMusic.song_lyrics(song.copyrightid)
MiguMusic.song_pic_url(song.musicid)
MiguMusic.download_file("http://cdnmusic.migu.cn/picture/2019/1031/1528/AL28cedb08c3254ae287705f1bce2a7636.jpg", output: "../downloads/test.jpg")
MiguMusic.download_file("http://cdnmusic.migu.cn/picture/2019/1031/1528/AL28cedb08c3254ae287705f1bce2a7636.jpg", output: "../downloads/test2.jpg")
music_info["contentId"]
music_info
song_info
MusicJob.first
MusicJob.first.song
File.join("good/", "bad")
File.join("good/", "/bad")
File.join("../downloads", "good")
equire 'fileutils'
require 'fileutils'
require 'fileutilsdfwef'
exit
song = Song.first
song.disk_location
song.music_folder_path
song.music_folder_path
song.music_folder_path
song.cover_file_path
exit
MiguMusic.download_file("http://cdnmusic.migu.cn/picture/2019/1031/1528/AL28cedb08c3254ae287705f1bce2a763623456.jpg", output: "../downloads/test2.jpg")
MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at).first
 job = MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: false)
job
MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at)
MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at).first
job.running
job.reload
job.running
job.running = false
job.save
exit
 job = MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: false)
job.running
job.running
job.reload
job.running
LOG
LOG.tagged
exit
job = MusicJob.where(running: false, mp3_downloaded: false, error: nil).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: true)
job
job = MusicJob.first
job.running
KuwoDownloader.process_job(job)
job
exit
job = MusicJob.first
KuwoDownloader.process_job(job)
job.class
Song.first
[].empty?
exit
job = MusicJob.first
KuwoDownloader.process_job(job)
exit
job = MusicJob.first
job
KuwoDownloader.process_job(job)
KuwoDownloader.process_job(job)
exit
job = MusicJob.first
KuwoDownloader.process_job(job)
job.reload
exit
exit
job = MusicJob.first
KuwoDownloader.process_job(job)
job.reload
job.last_run
exit
job = MusicJob.first
KuwoDownloader.process_job(job)
MiguDownloader.process_job(job)
exit
MiguDownloader.start
MiguDownloader.stop
exit
MiguDownloader.stop
MiguDownloader.start
MiguDownloader.stop
job = MusicJob.where(
        running: false,
        mp3_downloaded: true,
        cover_downloaded: true,
        ass_subtitles_generated: true,
        video_cover_generated: false,
        error: nil
      ).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: false)
job
exit
VideoProcessor.start
exit
VideoProcessor.start
Ju
MusicJob.first
MusicJob.first.update(running: false)
VideoProcessor.stop
s = Song.first
s.lyrics_list
s.lyrics_list.map { _1["lyric"] }
s.lyrics_list.map { _1["lyric"] }.join("\n")
File.join("/Users/eding/Documents/projects/my-video-app", s.video_file_path)
exit
s = Song.fiorst
s = Song.first
File.join("/Users/eding/Documents/projects/my-video-app", s.video_file_path(relative: false))
exit
song = Song.first
File.join(ENV["UPLOADER_FILE_FOLDER"], song.video_file_path(relative: true))
exit
song = Song.first
File.join(ENV["UPLOADER_FILE_FOLDER"], song.video_file_path(relative: true))
description = <<~TXT
      Welcome to subscribe us https://www.youtube.com/channel/UCMSUswyigS3R59TXLN2K_IA?view_as=subscriber
      #{s.lyrics_list.map { _1["lyric"] }.join("\n")}
      Disclaimer: None of these images, music were created/owned by us. This video is purely fan-made, if you (owners) want to remove this video, please CONTACT US DIRECTLY before doing anything. We will respectfully remove it.
      如若我的視頻有任何侵犯版權的地方，請留言告知，我會第一時間刪除。懇請您不要向 Youtube 投訴，免致頻道被關閉，並對我無意中侵犯版權的行為謹此致萬分歉意
      TXT
description = <<~TXT
      Welcome to subscribe us https://www.youtube.com/channel/UCMSUswyigS3R59TXLN2K_IA?view_as=subscriber
      #{song.lyrics_list.map { _1["lyric"] }.join("\n")}
      Disclaimer: None of these images, music were created/owned by us. This video is purely fan-made, if you (owners) want to remove this video, please CONTACT US DIRECTLY before doing anything. We will respectfully remove it.
      如若我的視頻有任何侵犯版權的地方，請留言告知，我會第一時間刪除。懇請您不要向 Youtube 投訴，免致頻道被關閉，並對我無意中侵犯版權的行為謹此致萬分歉意
      TXT
puts description
description = <<~TXT
      Welcome to subscribe us https://www.youtube.com/channel/UCMSUswyigS3R59TXLN2K_IA?view_as=subscriber\n
      #{song.lyrics_list.map { _1["lyric"] }.join("\n")}\n
      Disclaimer: None of these images, music were created/owned by us. This video is purely fan-made, if you (owners) want to remove this video, please CONTACT US DIRECTLY before doing anything. We will respectfully remove it.
      如若我的視頻有任何侵犯版權的地方，請留言告知，我會第一時間刪除。懇請您不要向 Youtube 投訴，免致頻道被關閉，並對我無意中侵犯版權的行為謹此致萬分歉意
      TXT
puts description
tags = ["华语", "经典", "歌词", "高清"]
      tags << song.artist
data = {
        title: "#{song.artist} - #{song.title} (动态歌词/最高音质)",
        description: description,
        video: File.join(ENV["UPLOADER_FILE_FOLDER"], song.video_file_path(relative: true)),
        kids: false,
        tags: tags.join(","),
        publish_type: "PUBLIC"
      }
data
exit
VideoUploader.start
exit
MiguMusic.search_music("周杰伦")
songs = _["musics"]
songs
exit
songs = MiguMusic.search_music("周杰伦")["musics"]
songs.each do |song| MiguMusic.migu_to_song_model(song) end
MusicJob.count
MusicJob.where(video_cover_generated: true)
MusicJob.where(video_cover_generated: true).count
MusicJob.where(video_uploaded: true).count
MusicJob.where(video_generated: true).count
MusicJob.where(video_generated: true, running: true).count
MusicJob.where(video_generated: true, running: false)
MusicJob.where(video_generated: true).count
MusicJob.where(video_generated: true).first
exit
VideoUploader.start
VideoUploader.stop
exit
VideoUploader.start
VideoUploader.stop
exit'
exit
job = MusicJob.find("5fc4a33a291ebb552a01f04e")
job
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc4a33a291ebb552a01f04e")
ENV["UPLOADER_FILE_FOLDER"]
job = MusicJob.find("5fc4a33a291ebb552a01f04e")
VideoUploader.process_job(job)
exit
exit
job = MusicJob.find("5fc4a33a291ebb552a01f04e")
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc4a33a291ebb552a01f04e")
VideoUploader.process_job(job)
VideoUploader.start
exit
exit
VideoUploader.start
VideoUploader.stop
exit
VideoUploader.start
VideoUploader.stop
VideoUploader.start
VideoUploader.stop
VideoUploader.start
VideoUploader.stop
exit
Song.first.artistid
MiguMusic.artist_songs("112", per_page: 100)
MiguMusic.artist_songs("112", per_page: 30)
"我是如此相信 (电影《天火》主题曲".gsub(/\(.*?\)/, '')
"我是如此相信 (电影《天火》主题曲)".gsub(/\(.*?\)/, '')
"我是如此相信 (电影《天火》主题曲)".gsub(/\(.*?\)/, '').strip
exit
"我是如此相信 (电影《天火》主题曲)".gsub(/\(.*?\)/, '').strip
songs = MiguMusic.artist_songs("112", per_page: 60)
songs[0]
MiguMusic.migu_to_song_model(songs[0])
Song.last
Song.last
Song.last.delete
s = songs[0]
s
migu_music = s
model_keys_mapping = {
        musicid: :id,
        artistid: :singerId,
        name: :songName,
        albumid: :albumId,
        artist: :singerName,
        album: :albumName,
        copyrightid: :copyrightId
      }
song_info = model_keys_mapping.keys.map do |key|
        [key, migu_music[model_keys_mapping[key]&.to_s || "_____"]]
      end.to_h.compact
song_info
s.keys
s["song"]
migu_music = s["song"]
migu_music
song_info = model_keys_mapping.keys.map do |key|
        [key, migu_music[model_keys_mapping[key]&.to_s || "_____"]]
      end.to_h.compact
song_info
songs.map { _1["song"] }.each do |song| MiguMusic.migu_to_song_model(song) end
songs[0]
songs[0]["song"]
songs = songs.map { _1["song"] }
songs[0]
songs.each do |song| MiguMusic.migu_to_song_model(song) end
song = song[0]
song = songs[0]
MiguMusic.migu_to_song_model(song)
song = songs.last
song
song = songs[-1]
song
song = songs[-2]
song
songs.compact.each do |song| MiguMusic.migu_to_song_model(song) end
Song.count
Song.last
Song.name
Song.last.name
Song.last.delete
exit
Song.last
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test.jpg", artist: "GOOD", title: "你好")
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.last
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
song = Song.find_by name: "告白气球(3D Audio)"
song
song.name
song.title
song.artist
exit
song.artist
song = Song.find_by name: "告白气球(3D Audio)"
song.name
exit
song = Song.find_by name: "告白气球(3D Audio)"
song.name
song.title
song.clean_name
Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
song.lyrics_list
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
song
song.lyrics_list
song.
song.copyrightid
song.lyrics_list
song.copyrightid
pattern = /\[(?<minute>\d{2}):(?<second>\d{2})\.(?<micro_second>\d{2})\]/
pattern.meatch("[02:05.08][03:56.29]我的感觉 你已听不见")
pattern.match("[02:05.08][03:56.29]我的感觉 你已听不见")
"[02:05.08][03:56.29]我的感觉 你已听不见".scan(pattern)
"[02:05.08][03:56.29]我的感觉 你已听不见".scan(pattern).class
"[02:05.0d8][03:56.2d9]我的感觉 你已听不见".scan(pattern)
"[02:05.0d8][03:56.2d9]我的感觉 你已听不见".gsub(/(\[.*\])/, "")
"[02:05.0d8][03:56.2d9]我的感觉 你已听不见".gsub(/(\[.*\])/, "").strip
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
MiguMusic.song_lyrics(song.copyrightid)
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
exit
song = Song.find_by name: "断了的弦(电影《寻找周杰伦》插曲)"
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: "GOOD", title: "你好")
VideoMaker.make_cover_image(input: song.cover_file_path, output: "../downloads/test2.jpg", artist: song.artist, title: song.clean_name)
exit
MiguDownloader.start
VideoProcessor.start
exit
exit
job = MusicJob.where(
        running: false,
        video_generated: true,
        video_uploaded: false,
        error: nil
      ).asc(:created_at).find_one_and_update({ "$set": { "running": true }}, new: false)
job
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
Youtube.driver
Youtube.browser.text.include?("Daily upload limit reached")
Youtube.browser.methods
Youtube.browser.status
Youtube.browser.close()
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
Youtube.browser.text.include?("Daily upload limit reached")
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
exit
VideoUploader.process_job(job)
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
VideoUploader.process_job(job)
VideoUploader.process_job(job)
exit
job = MusicJob.find("5fc688ac291ebb77672a79c2")
job.update(error: nil)
job.update(running: false)
VideoUploader.start
exit
exit
